generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Article {
  id          String          @id @default(uuid()) @db.Uuid
  title       String          @db.VarChar(255)
  slug        String          @unique @db.VarChar(255)
  summary     String?
  content     String
  category    String          @db.VarChar(100)
  published   Boolean         @default(false)
  createdAt   DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime        @default(now()) @map("updated_at") @db.Timestamptz(6)
  description String?
  trivia      ArticleTrivia[]
  images      Image[]

  @@index([published, createdAt(sort: Desc)], map: "articles_published_created_idx")
  @@index([category, published, createdAt(sort: Desc)], map: "articles_category_published_idx")
  @@index([title])
  @@index([updatedAt(sort: Desc)], map: "articles_updated_idx")
  @@map("articles")
}

model ArticleTrivia {
  id           String   @id @default(uuid()) @db.Uuid
  articleId    String   @map("article_id") @db.Uuid
  title        String   @db.VarChar(200)
  content      String
  contentEn    String?  @map("content_en")
  category     String   @db.VarChar(50)
  tags         String[] @default([])
  iconEmoji    String?  @map("icon_emoji") @db.VarChar(10)
  colorTheme   String?  @map("color_theme") @db.VarChar(30)
  displayOrder Int      @default(0) @map("display_order")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  article      Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([articleId, displayOrder], map: "trivia_article_order_idx")
  @@index([articleId, isActive, displayOrder], map: "trivia_article_active_idx")
  @@index([category, isActive], map: "trivia_category_active_idx")
  @@index([tags], map: "trivia_tags_idx")
  @@map("article_trivia")
}

model CategoryItem {
  id          String              @id @default(uuid()) @db.Uuid
  title       String              @db.VarChar(255)
  slug        String              @unique @db.VarChar(255)
  summary     String?
  description String?
  content     String
  category    String              @db.VarChar(100)
  published   Boolean             @default(false)
  createdAt   DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime            @default(now()) @map("updated_at") @db.Timestamptz(6)
  images      CategoryItemImage[]

  @@index([published, createdAt(sort: Desc)], map: "category_items_published_created_idx")
  @@index([category, published, createdAt(sort: Desc)], map: "category_items_category_published_idx")
  @@map("category_items")
}

model CategoryItemImage {
  id             String       @id @default(uuid()) @db.Uuid
  categoryItemId String       @map("category_item_id") @db.Uuid
  url            String
  altText        String?      @map("alt_text") @db.VarChar(255)
  isFeatured     Boolean      @default(false) @map("is_featured")
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  categoryItem   CategoryItem @relation(fields: [categoryItemId], references: [id], onDelete: Cascade)

  @@index([categoryItemId, isFeatured, createdAt(sort: Desc)], map: "category_item_images_featured_idx")
  @@map("category_item_images")
}

model ContactMessage {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @db.VarChar(255)
  email     String   @db.VarChar(255)
  subject   String   @db.VarChar(255)
  message   String
  status    String   @default("unread") @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([status, createdAt(sort: Desc)], map: "contact_messages_status_created_idx")
  @@index([createdAt(sort: Desc)], map: "contact_messages_created_idx")
  @@map("contact_messages")
}

model Image {
  id         String   @id @default(uuid()) @db.Uuid
  articleId  String   @map("article_id") @db.Uuid
  url        String
  altText    String?  @map("alt_text") @db.VarChar(255)
  isFeatured Boolean  @default(false) @map("is_featured")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  article    Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([articleId, isFeatured, createdAt(sort: Desc)], map: "images_article_featured_idx")
  @@index([articleId], map: "images_article_idx")
  @@index([isFeatured], map: "images_featured_idx")
  @@map("images")
}
